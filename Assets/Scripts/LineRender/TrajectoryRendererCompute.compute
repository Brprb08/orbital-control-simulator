StructuredBuffer<float3> initialPosition;  // single position for the body
StructuredBuffer<float3> initialVelocity;  // single velocity
StructuredBuffer<float>   mass;            // the mass of this body

// For gravitational bodies (like central body, etc.)
StructuredBuffer<float3> bodyPositions;  // array of positions for other bodies
StructuredBuffer<float>  bodyMasses;     // array of masses for other bodies
uint numOtherBodies;                     // how many bodies are in bodyPositions

// The output trajectory. We'll store 'steps' positions
RWStructuredBuffer<float3> outTrajectory;

// Uniforms
float deltaTime;
uint steps;
float gravitationalConstant;

float3 ComputeAcceleration(float3 position, float thisMass)
{
    float3 totalForce = float3(0,0,0);

    // Sum the gravitational force from each other body
    for (uint i = 0; i < numOtherBodies; i++)
    {
        float3 dir = bodyPositions[i] - position;
        float distSq = dot(dir, dir);
        
        // Avoid dividing by zero or extremely small
//         float minDistSq = 1e-3;  // tweak as necessary
//         if (distSq < minDistSq) distSq = minDistSq;

//         float maxDistSq = 1e16; // Example large clamp; pick a suitable max
// if (distSq > maxDistSq) distSq = maxDistSq;

        float forceMag = gravitationalConstant * (thisMass * bodyMasses[i]) / distSq;
        totalForce += normalize(dir) * forceMag;
    }

    // Convert total force to acceleration
    return totalForce / thisMass;
}

// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel RungeKuttaKernel

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture


[numthreads(8,8,1)]
void RungeKuttaKernel (uint3 id : SV_DispatchThreadID)
{
    float3 pos = initialPosition[0];
    float3 vel = initialVelocity[0];
    float thisMass = mass[0];

    for (uint i = 0; i < steps; i++)
    {
        // Write this iteration's position to outTrajectory
        outTrajectory[i] = pos;

        // =========== Runge-Kutta 4 integration =========== //
        float3 k1_pos = vel;
        float3 k1_vel = ComputeAcceleration(pos, thisMass);

        float3 k2_pos = vel + (k1_vel * (deltaTime / 2.0));
        float3 k2_vel = ComputeAcceleration(pos + (k1_pos * (deltaTime / 2.0)), thisMass);

        float3 k3_pos = vel + (k2_vel * (deltaTime / 2.0));
        float3 k3_vel = ComputeAcceleration(pos + (k2_pos * (deltaTime / 2.0)), thisMass);

        float3 k4_pos = vel + (k3_vel * deltaTime);
        float3 k4_vel = ComputeAcceleration(pos + (k3_pos * deltaTime), thisMass);

        pos += (deltaTime / 6.0) * (k1_pos + 2.0*k2_pos + 2.0*k3_pos + k4_pos);
        vel += (deltaTime / 6.0) * (k1_vel + 2.0*k2_vel + 2.0*k3_vel + k4_vel);
    }
}
