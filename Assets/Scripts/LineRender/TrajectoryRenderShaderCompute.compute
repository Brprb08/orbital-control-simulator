StructuredBuffer<float3> initialPosition;  
StructuredBuffer<float3> initialVelocity;  
StructuredBuffer<float>   mass;            

// For gravitational bodies (like central body, etc.)
StructuredBuffer<float3> bodyPositions;  
StructuredBuffer<float>  bodyMasses;     
uint numOtherBodies;                     

RWStructuredBuffer<float3> outTrajectory;

float deltaTime;
uint steps;
float gravitationalConstant;

float3 ComputeAcceleration(float3 position, float thisMass)
{
    float3 totalForce = float3(0, 0, 0);

    float minDistSq = .1;
    float maxDistSq = 1e12;
    float maxForce = 2e16;   

    for (uint i = 0; i < numOtherBodies; i++)
    {
        float3 dir = bodyPositions[i] - position;

        float distSq = dot(dir, dir);

        distSq = clamp(distSq, minDistSq, maxDistSq);

        float forceMag = (gravitationalConstant * (thisMass * bodyMasses[i])) / distSq;
        forceMag = min(forceMag, maxForce);
        totalForce += normalize(dir) * forceMag;
    }
    
    return totalForce / thisMass;
}

#pragma kernel RungeKutta

[numthreads(1, 1, 1)]
void RungeKutta(uint3 id : SV_DispatchThreadID)
{
    float3 pos = initialPosition[0];
    float3 vel = initialVelocity[0];
    float thisMass = mass[0];

    for (uint i = 0; i < steps; i++)
    {
        outTrajectory[i] = pos;

        float3 k1_pos = vel;
        float3 k1_vel = ComputeAcceleration(pos, thisMass);

        float3 k2_pos = vel + (k1_vel * (deltaTime / 2.0));
        float3 k2_vel = ComputeAcceleration(pos + (k1_pos * (deltaTime / 2.0)), thisMass);

        float3 k3_pos = vel + (k2_vel * (deltaTime / 2.0));
        float3 k3_vel = ComputeAcceleration(pos + (k2_pos * (deltaTime / 2.0)), thisMass);

        float3 k4_pos = vel + (k3_vel * deltaTime);
        float3 k4_vel = ComputeAcceleration(pos + (k3_pos * deltaTime), thisMass);

        pos += (deltaTime / 6.0) * (k1_pos + 2.0 * k2_pos + 2.0 * k3_pos + k4_pos);
        vel += (deltaTime / 6.0) * (k1_vel + 2.0 * k2_vel + 2.0 * k3_vel + k4_vel);
    }
}